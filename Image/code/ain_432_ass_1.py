# -*- coding: utf-8 -*-
"""AIN 432 Ass 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SxAtlYDmXxnzvk8iF129zU4KfBA1LIgC

# AIN 432 - Fundamentals of Image Processing Laboratory
**Assignment 1**

**Giving Cartoon Effect to Colorful Images**

**Instructor:** Aydın Kaya

**TA:** Burçak Asal

## Student Information

**Name Surname:** Mehmet Ertaş

**Student ID:** 2200765035

## Library Importing
"""

import numpy as np # linear algebra
import scipy
import matplotlib.pyplot as plt
import cv2
from google.colab.patches import cv2_imshow

"""##Image Selecting

"""

from google.colab import drive
drive.mount('/content/drive')

path = "/content/drive/My Drive/data/in_51.png"
img = cv2.imread(path)
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2_imshow(img)
cv2_imshow(gray)

"""##Step 1: Image Smoothing"""

result = scipy.ndimage.median_filter(gray, size=4)
cv2_imshow(result)

"""##Step 2: Edge Detection"""

# Apply Gaussian blur
low_sigma = cv2.GaussianBlur(gray,(5,5),0)
high_sigma = cv2.GaussianBlur(gray,(7,7),0)

# Calculate the DoG by subtracting
dog = low_sigma - high_sigma
cv2_imshow(dog)

ret, thresh1 = cv2.threshold(dog, 10, 255, cv2.THRESH_BINARY_INV)
cv2_imshow(thresh1)

"""##Step 3: Image Quantization"""

z = img.reshape((-1,3))

# convert to np.float32
z = np.float32(z)

# define criteria, number of clusters(K) and apply kmeans()
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
K = 10
ret,label,center=cv2.kmeans(z,K,None,criteria,10,cv2.KMEANS_RANDOM_CENTERS)

# Convert back into uint8, and make original image
center = np.uint8(center)
res = center[label.flatten()]
res2 = res.reshape((img.shape))

# display the image
cv2_imshow(res2)

"""##Step 4: Combining Images"""

bgr = cv2.cvtColor(thresh1, cv2.COLOR_GRAY2RGB)
res3 = np.invert(res2)
results = bgr * res3

cv2_imshow(results)